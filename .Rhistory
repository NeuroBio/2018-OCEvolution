Problem_1(10000000)
n1 <- 1
n2 <- 2
n1 <- 1
n2 <- 2
for(i in 1:N){
n3 <- n1+n2
n1 <- n2
n2 <- n3
}
n3
#Problem_2
N <- 10
n1 <- 1
n2 <- 2
for(i in 1:N){
n3 <- n1+n2
n1 <- n2
n2 <- n3
}
n3
N <- N-2
for(i in 1:N){
n3 <- n1+n2
n1 <- n2
n2 <- n3
}
n3
n1 <- 1
n2 <- 2
N <- N-2
for(i in 1:N){
n3 <- n1+n2
n1 <- n2
n2 <- n3
}
n3
n1 <- 1
n2 <- 2
N <- N-2
for(i in 1:N){
n3 <- n1+n2
n1 <- n2
n2 <- n3
}
n3
n1 <- 1
n2 <- 2
N <- N-2
for(i in 1:N){
n3 <- n1+n2
n1 <- n2
n2 <- n3
}
n3
n1 <- 1
n2 <- 2
N <- N-2
for(i in 1:N){
n3 <- n1+n2
n1 <- n2
n2 <- n3
}
n3
#Problem_2
N <- 10
n1 <- 1
n2 <- 2
N <- N-2
for(i in 1:N){
n3 <- n1+n2
n1 <- n2
n2 <- n3
}
n3
#Problem_2
N <- 10
n1 <- 1
n2 <- 2
holder <- vector("numeric", N)
holder[1:2] <- c(n1,n2)
for(i in 3:N){
holder[i] <- n1+n2
n1 <- n2
n2 <- holder[i]
}
holder
holder%%2
index <- holder%%2
holder[-index]
index <- holder%%2
holder[-index]
index
-index
holder[-index]
holder[!index]
sum(holder[!index])
n1 <- 1
n2 <- 2
holder <- vector("numeric", N)
holder[1:2] <- c(n1,n2)
for(i in 3:N){
holder[i] <- n1+n2
n1 <- n2
n2 <- holder[i]
}
holder
index <- holder%%2
return(sum(holder[!index]))
Problem_2 <- function(N){
n1 <- 1
n2 <- 2
holder <- vector("numeric", N)
holder[1:2] <- c(n1,n2)
for(i in 3:N){
holder[i] <- n1+n2
n1 <- n2
n2 <- holder[i]
}
index <- holder%%2
return(sum(holder[!index]))
}
Problem_2(600)
Problem_2(60)
Problem_2(10)
Problem_2(11)
Problem_2(11)
#Problem_2
N <- 11
n1 <- 1
n2 <- 2
holder <- vector("numeric", N)
holder[1:2] <- c(n1,n2)
for(i in 3:N){
holder[i] <- n1+n2
n1 <- n2
n2 <- holder[i]
}
index <- holder%%2
holder
return(sum(holder[!index]))
Problem_2(11)
#Problem_2
N <- 12
Problem_2 <- function(N){
n1 <- 1
n2 <- 2
holder <- vector("numeric", N)
holder[1:2] <- c(n1,n2)
for(i in 3:N){
holder[i] <- n1+n2
n1 <- n2
n2 <- holder[i]
}
index <- holder%%2
return(sum(holder[!index]))
}
Problem_2(12)
Problem_2(13)
Problem_2(14)
Problem_2(15)
Problem_2(16)
Problem_2(17)
Problem_2(100)
warnings()
#What about that pesky background color?
#It's time for a new function
par(bg='black')
plot(x,y,
xlab="Quantity of Tandori Chicken", ylab="Incidents of Piracy",
xlim = c(0,10), ylim=c(1,10),
pch=1:10,
type='b',
xaxt='n',
log='y',
font=2,
col=c('chocolate', 'seagreen', 'plum'),
lwd=3,
lty=3,
main = "Role of Chicken in Pirate Hostility",
sub="This is hadcore research",
cex=3,
cex.main=2, cex.lab=.5, cex.sub=1, cex.axis=2,
col.main='red', col.lab='orange',col.sub='green', col.axis='blue',
font.lab=3, font.main=4, font.sub=4,
fg='salmon')
#basic
par(mfrow=c(1,2))#ignore this for now
x <- 1:10
y <- 1:10
plot(x,y)
dev.off()
x <- 1:10
y <- 1:10
plot(x,y)
#What about that pesky background color?
#It's time for a new function
par(bg='black')
plot(x,y,
xlab="Quantity of Tandori Chicken", ylab="Incidents of Piracy",
xlim = c(0,10), ylim=c(1,10),
pch=1:10,
type='b',
xaxt='n',
log='y',
font=2,
col=c('chocolate', 'seagreen', 'plum'),
lwd=3,
lty=3,
main = "Role of Chicken in Pirate Hostility",
sub="This is hadcore research",
cex=3,
cex.main=2, cex.lab=.5, cex.sub=1, cex.axis=2,
col.main='red', col.lab='orange',col.sub='green', col.axis='blue',
font.lab=3, font.main=4, font.sub=4,
fg='salmon')
#Let's back up and return to the basic plot to see what else par can do.
dev.off() #I'll explain this in a moment
par(bg='goldenrod')
plot(x,y)
#add multiple plots (2 cols)
par(bg='goldenrod', mfrow=c(1,2))
plot(x,y)
plot(x,y)
#add multiple plots (2 rows)
par(mfrow=c(2,1))
plot(x,y)
plot(x,y)
#add multiple plots (3x3)
par(mfrow=c(3,3))
plot(x,y)
plot(x,y)
plot(x,y)
plot(x,y)
plot(x,y)
plot(x,y)
plot(x,y)
plot(x,y)
plot(x,y)
plot(x,y)
#you may be thinking this makes no sense to do,
#because the plots are squished.  We can fix this!
par(bg='goldenrod', mfrow=c(2,2), mar=c(5.1, 4.1, 4.1, 2.1))#defaults
plot(x,y)
plot(x,y)
plot(x,y)
plot(x,y)
#you may be thinking this makes no sense to do,
#because the plots are squished.  We can fix this!
par(mfrow=c(2,2), mar=c(5.1, 4.1, 4.1, 2.1))#defaults
plot(x,y)
plot(x,y)
plot(x,y)
plot(x,y)
#mar stands for margin; the white space around the plot.
#lets remove a bunch of it.
#The four numbers are bottom, left, top, right
par(mar=c(3.5, 3.5, 2, .1))
plot(x,y)
plot(x,y)
plot(x,y)
plot(x,y)
#change the spacing on axis
par(mar=c(5.1, 4.1, 4.1, 2.1))
par(mfrow=c(1,1), mgp=c(3,1,0)) #defaults
plot(x,y)
#change the spacing on axis
par(mar=c(5.1, 4.1, 4.1, 2.1))
par(mfrow=c(1,1), mgp=c(3,1,0)) #defaults
plot(x,y)
par(mgp=c(0,1,0)) #first number is the label
plot(x,y)
par(mgp=c(3,0,0)) #second number is the tic labels
plot(x,y)
par(bg='goldenrod', mfrow=c(1,1), mgp=c(3,1,3)) #third number is the axis itself
plot(x,y)
#why tweak this?  pls compair:
par(mar=c(3.5, 3.5, 2, .1))
par(bg='goldenrod', mfrow=c(1,2), mgp=c(3,1,0)) #defaults
plot(x,y, main="default")
par(mgp=c(2,.5,0))
plot(x,y, main="squished")
dev.off() #I'll explain this in a moment
plot(x,y)
legend(x="bottomright", legend="dots")
legend(x="topleft", legend="dots", col="green",
border="purple", lty=3, lwd=.5,pch=17,
adj=.5, text.col='purple')
plot(x,y)
abline(2,4, col='red', lty=5, lwd=3)
abline(4,2, col='green', lty=4, lwd=3)
abline(10,-2, col='blue', lty=4, lwd=3)
plot(x,y, xlim=c(0,10))
abline(2,4, col='red', lty=5, lwd=3)
abline(4,2, col='green', lty=4, lwd=3)
abline(10,-2, col='blue', lty=4, lwd=3)
abline(v=0, col='black')
plot(x,y, xlim=c(0,10))
abline(2,4, col='red', lty=5, lwd=3)
abline(4,2, col='green', lty=4, lwd=3)
abline(10,-2, col='blue', lty=6, lwd=3)
abline(v=0, col='black')
abline(h=10, col='purple')
plot(x,y)
segments(c(1,3), c(2,4), c(2,4), c(3,5), col=c('purple', 'green'), lwd=4)
#thus you can draw any configuration you need
plot(x,y)
segments(1,1,2,4,col="red", lwd=3)
segments(2,4,3,1, col="orange", lwd=3)
segments(3,1,1,2.75, col='yellow', lwd=3)
segments(1,2.75,3,2.75, col='green', lwd=3)
segments(1,1,3,2.75, col="blue", lwd=3)
#The last thing you might wnat to do is add text to your plot
plot(x,y)
mtext("sweet graph bro", side=1,line=0)
mtext("sweet graph bro2", side=2,line=0)
mtext("sweet graph bro3", side=3,line=0)
mtext("sweet graph bro4", side=4,line=0)
mtext("above sweet graph bro4", side=4,line=1)
#and for text within the plot...
text(3,4, "bodacious graph1", adj=0)
text(3,5, "bodacious graph2", adj=.5)
text(3,6, "bodacious graph3", adj=1)
#last part: how do I save my graph?
pdf("title.pdf") #creates a new .pdf
plot(x,y) #add whatever graphs you want
dev.off() #stop writting to the .pdf
getwd()
#other functiosn to look into for extreme formating:
Layout()
#other functiosn to look into for extreme formating:
layout()
#basic
par(mfrow=c(1,2))#ignore this for now
x <- 1:10
y <- 1:10
plot(x,y)
hist(x)
?rnorm
z <- rnorm(20)
#basic
par(mfrow=c(1,2))#ignore this for now
x <- 1:10
y <- 1:10
z <- rnorm(20)
plot(x,y)
hist(z)
boxplot(z)
pairs(x,y,z)
pairs(cbind(x,y,z))
#basic
par(mfrow=c(2,2))#ignore this for now
x <- 1:10
y <- 1:10
z <- rnorm(20)
plot(x,y)
hist(z)
boxplot(z)
pairs(cbind(x,y,z))
#basic
par(mfrow=c(1,2))#ignore this for now
x <- 1:10
y <- 1:10
z <- rnorm(20)
plot(x,y)
hist(z)
boxplot(z)
pairs(cbind(x,y,z))
#extreme addition of things
plot(x,y)
plot(x,y,
#labels for x and y axis
xlab="Quantity of Tandori Chicken", ylab="Incidents of Piracy",
#range for the x and y axis
xlim = c(0,10), ylim=c(1,10),
#whether to even plot an axis or not
xaxt='n',
#whether the axis should be on log or linear scale
log='y',
#what kind of plot?
type='b',
#add a main title
main = "Role of Chicken in Pirate Hostility",
#add a subtitle
sub="This is hadcore research",
#change the line style
lty=3,
#change the dot/point style
pch=1:10,
#change the width of the lines
lwd=3,
#change the size for the dots/points
cex=3,
#change font sizes
cex.main=.5, cex.lab=.8, cex.sub=1, cex.axis=2,
#change pch and line color
col=c('chocolate', 'seagreen', 'plum'),
#color most everything else
col.main='red', col.lab='purple',col.sub='green', col.axis='blue',
#color the figure outline
fg='salmon',
#change the font style (1=plain, 2=bold, 3=itals, 4=bolditals)
font=2, #axis
font.lab=3, font.main=2, font.sub=4)
getwd()
setwd(file.path(getwd(), "R", "2018-OCEvolution"))
getwd()
mega <- read.csv("Final Mating Systems Data reconciliation.csv", stringsAsFactors = FASLE)
mega <- read.csv("Final Mating Systems Data reconciliation.csv", stringsAsFactors = FALSE)
main <- read.csv("AllData 2-2-18", stringsAsFactors = FALSE)
main <- read.csv("AllData 2-2-18.csv", stringsAsFactors = FALSE)
main
birbs <- main$BirdtreeFormat
birbs
which(mega$BirdtreeFormat $in$ birbs)
which(mega$BirdtreeFormat %in% birbs)
birbers <- which(mega$BirdtreeFormat %in% birbs)
?write.csv
write.csv(main[birbers,], "trunc.csv")
main[birbers,]
main
birbs
birbers
View(mega)
View(mega)
read.csv()
?read.csv()
mega <- read.csv("Final Mating Systems Data reconciliation.csv", stringsAsFactors = FALSE,
fill=TRUE)
View(mega)
View(mega)
View(mega)
birbers <- which(mega$BirdtreeFormat %in% birbs)
birbers
main[birbers,]
mega <- read.csv("Final Mating Systems Data reconciliation.csv", stringsAsFactors = FALSE,
fill=TRUE,strip.white = TRUE)
View(mega)
View(mega)
birbers <- which(mega$BirdtreeFormat %in% birbs)
main[birbers,]
birbers
birbers <- which(mega$BirdtreeFormat %in% birbs)
mega$BirdtreeFormat
mega <- read.csv("Final Mating Systems Data reconciliation.csv", stringsAsFactors = FALSE,
fill=TRUE,strip.white = TRUE,blank.lines.skip = FALSE)
main <- read.csv("AllData 2-2-18.csv", stringsAsFactors = FALSE,)
birbs <- main$BirdtreeFormat
birbers <- which(mega$BirdtreeFormat %in% birbs)
birbers
mega$BirdtreeFormat %in% birbs
main[birbers,]
main[birbers[1],]
main[birbers[7],]
birbers[7]
main[108,]
mega <- read.csv("Final Mating Systems Data reconciliation.csv", stringsAsFactors = FALSE,
fill=TRUE,strip.white = TRUE,blank.lines.skip = FALSE,
flush=TRUE)
main <- read.csv("AllData 2-2-18.csv", stringsAsFactors = FALSE)
birbs <- main$BirdtreeFormat
birbers <- which(mega$BirdtreeFormat %in% birbs)
write.csv(main[birbers,], "trunc.csv")
main[108,]
which(is.na(mega$BirdtreeFormat))
mega$BirdtreeFormat
which(is.na(mega$BirdtreeFormat[birbers]))
mega$BirdtreeFormat[birbers]
birbers
mega <- read.csv("Final Mating Systems Data reconciliation.csv", stringsAsFactors = FALSE,
fill=TRUE,strip.white = TRUE,blank.lines.skip = FALSE,
flush=TRUE, headers = TRUE)
mega <- read.csv("Final Mating Systems Data reconciliation.csv", stringsAsFactors = FALSE,
fill=TRUE,strip.white = TRUE,blank.lines.skip = FALSE,
flush=TRUE, header = TRUE)
mega
main <- read.csv("AllData 2-2-18.csv", stringsAsFactors = FALSE)
birbs <- main$BirdtreeFormat
birbers <- which(mega$BirdtreeFormat %in% birbs)
main[108,]
mega <- read.csv("Final Mating Systems Data reconciliation.csv", stringsAsFactors = FALSE,
fill=TRUE,strip.white = TRUE,blank.lines.skip = FALSE,
flush=TRUE, header = TRUE)
main <- read.csv("AllData 2-2-18.csv", stringsAsFactors = FALSE)
birbs <- main$BirdtreeFormat
birbers <- which(mega$BirdtreeFormat %in% birbs)
main[108,]
main[birbers,]
mega <- read.csv("Final Mating Systems Data reconciliation.csv")
main <- read.csv("AllData 2-2-18.csv", stringsAsFactors = FALSE)
birbs <- main$BirdtreeFormat
birbers <- which(mega$BirdtreeFormat %in% birbs)
main[birbers,]
birbs
birbers <- which(mega$BirdtreeFormat %in% birbs)
birbers
main[birbers,]
birbers
main[200,]
main[150,]
main[100,]
main[40,]
main[45,]
main[50,]
main[80,]
main[70,]
main[60,]
main[61,]
main[65,]
main[64,]
birbers <- which(mega$BirdtreeFormat %in% birbs)
write.csv(mega[birbers,], "trunc.csv")
